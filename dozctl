#!/usr/bin/env bash
set -euox pipefail

LOG_FILE="/var/log/dozctl.log"

log_action() {
  local log_level="$1"
  local message="$2"
  local timestamp
  timestamp=$(date +'%Y-%m-%d %H:%M:%S')

  echo "${timestamp} [${log_level}] ${message}" | sudo tee -a "${LOG_FILE}" > /dev/null
}

# handle_error() {
#   local error_code="$?"
#   log_action "ERROR" "Script encountered an error. Exit code: ${error_code}. Command: ${BASH_COMMAND}"
#   exit "$error_code"
# }

# trap 'handle_error' ERR

help() {
    log_action "INFO" "Displaying help information."
    cat <<EOF
dozctl [COMMAND] [ARGS]
Launch firecracker VMs from configuration templates with networks
managed by CNI. VM configuration is stored in $VM_CONFIG_DIR
and network configuration is stored in $NET_CONFIG_DIR
Commands:
 create: Create a new firecracker VM with a network.
 destroy: Destroy a firecracker VM and its associated network.
Arguments:
 --id       ID of the VM. This ID will be shared with the network.
            Temporary VMs should always use a UUID.
 --cni      CNI configuration ID for the VM, which implies a CNI config
            in $CNI_CONFIG_DIR with that name. Defaults to "firecracker".
 --template VM configuration template. The MAC address and IP address
            will be interpolated with the output from the CNI network
            configuration. Defaults to $VM_CONFIG_DIR/config.json.
Extra commands:
 create-network:  Create the network for a VM only.
 destroy-network: Destroy an existing network.
EOF
}

# Paths
CHROOT_BASE="/srv/vm/jailer"
VM_CONFIG_DIR="/srv/vm/configs"
NET_CONFIG_DIR="/srv/vm/networks"
FILESYSTEMS_DIR="/srv/vm/filesystems"
KERNELS_DIR="/srv/vm/kernels"
NET_NS_DIR="/var/run/netns"
CNI_CONFIG_DIR="/etc/cni/net.d"

# Args set by command line flags
cni="firecracker"
id=""
template=""
image=""
space=""

errexit() {
    log_action "ERROR" "$1"
    exit 1
}

check() {
    log_action "INFO" "Performing system checks."
    command -v cnitool > /dev/null || errexit "missing cnitool"
    command -v firecracker > /dev/null || errexit "missing firecracker"
    command -v jailer > /dev/null || errexit "missing jailer"

    if [ ! -d /srv/vm ]; then
        sudo mkdir /srv/vm
        sudo chown -R dozman:dozman /srv/vm
        mkdir -p /srv/vm/{configs,filesystems,kernels,linux.git,networks,jailer}
        log_action "INFO" "Created necessary directories under /srv/vm."
    fi

    if [ ! -d "$CNI_CONFIG_DIR" ]; then
        errexit "missing $CNI_CONFIG_DIR"
    fi

    log_action "INFO" "System checks passed."
}

create-rootfs() {
    [ -z "$template" ] && template="$VM_CONFIG_DIR/config.json" 
    space=1000
    local rootfs_name="${FILESYSTEMS_DIR}/$(echo "$image" | cut -d '/' -f 2- | tr ':' '-')-${id}.ext4"
    local MOUNTDIR CONTAINER_ID size

    log_action "INFO" "Starting root filesystem creation."
    sudo cp "$template" "${VM_CONFIG_DIR}/${id}.json" || errexit "Failed copying template to VM config directory."

    MOUNTDIR=$(mktemp -d) || errexit "Failed creating temporary directory"
    CONTAINER_ID=$(sudo docker run -d "$image" /bin/bash) || errexit "Failed running container"
    # Check the size of the image and give it an additional 500MB
    size=$(docker image ls "$image" --format "{{.Size}}") || errexit "Failed getting image size"
    if [[ $size == *GB ]]; then 
    size=${size%GB}
    size=$(echo "($size * 1024)" | bc)
    else
    size=${size%MB} 
    fi
    size=$(echo $size + $space | bc)
    # Create and format disk image
    sudo qemu-img create -f raw "$rootfs_name" "${size}M" || errexit "Failed creating disk image"
    sudo mkfs.ext4 "$rootfs_name" || errexit "Failed formatting disk image"
    sudo mount "$rootfs_name" "$MOUNTDIR" || errexit "Failed mounting disk image"
    sudo docker cp "$CONTAINER_ID:/" "$MOUNTDIR" || errexit "Failed copying container content"

    # Extract files from local directory
    (cd images/files/ && sudo tar cf - . | sudo tar xf - -C "$MOUNTDIR") || errexit "Failed extracting files"

    # Create necessary directories and set ownership
    sudo mkdir -p "$MOUNTDIR/rom" "$MOUNTDIR/overlay" || errexit "Failed creating directories"
    sudo chown root:root "$MOUNTDIR/"* || errexit "Failed setting ownership"

    # Cleanup
    sudo umount "$MOUNTDIR" || errexit "Failed unmounting disk image"
    rm -rf "$MOUNTDIR" || errexit "Failed removing temporary directory"
    sudo docker rm -f "$CONTAINER_ID" || errexit "Failed removing container"

    # Update VM config with the new rootfs path
    jq "(.\"drives\"[] | select(.is_root_device == true).path_on_host) |= \"$rootfs_name\"" < "$template" | sudo tee "${VM_CONFIG_DIR}/${id}.json" > /dev/null
    log_action "INFO" "Root filesystem creation completed successfully."
}


create-vm-config() {
    log_action "INFO" "Creating VM configuration for VM ID: $id with template: $template."
    # [ -z "$template" ] && errexit "creating the VM config requires a --template"
    [ -z "$id" ] && errexit "creating the VM config requires a VM ID"
    [ ! -f "${NET_CONFIG_DIR}/${id}.json" ] && errexit "network configuration for $id not found"
    [ ! -f "$template" ] && errexit "could not find VM config template $template"

    [ ! -f "${VM_CONFIG_DIR}/${id}.json" ] && sudo cp "$template" "${VM_CONFIG_DIR}/${id}.json" && log_action "INFO" "Copied template to VM configuration directory."

    local boot_args mask mac ip gateway_ip _netcfg

    _netcfg="${NET_CONFIG_DIR}/${id}.json"

    mac=$(jq -r '.interfaces[] | select(.name == "eth0").mac' < "$_netcfg")
    ip=$(jq -r '.ips[0].address | rtrimstr("/24")' < "$_netcfg")
    gateway_ip=$(jq -r '.ips[0].gateway' < "$_netcfg")
    mask="255.255.255.0"
    hostname=$(echo "$id" | tr -d '-' | head -c 16)

    boot_args="console=ttyS0 reboot=k panic=1 pci=off"
    boot_args="${boot_args} ip=${ip}::${gateway_ip}:${mask}:${hostname}:eth0:off"

    jq "(.\"boot-source\".boot_args) |= \"$boot_args\"
        | (.\"network-interfaces\"[0].guest_mac) |= \"$mac\"
          " < "$template" | sudo tee "${VM_CONFIG_DIR}/${id}.json" > /dev/null
    log_action "INFO" "Created VM configuration with boot arguments and network interfaces."
}


create-hardlinks() {
    log_action "INFO" "Creating hardlinks for VM ID: $id."
    [ -z "$id" ] && errexit "create-hardlinks requires a VM ID"

    local kernel_path initrd_path rootfs_path other_paths path base

    base="${CHROOT_BASE}/firecracker/${id}/root"
    sudo mkdir -p "$base"
    sudo chown jailer:jailer "$base"

    kernel_path=$(jq -r '."boot-source".kernel_image_path' < "$template")
    initrd_path=$(jq -r '."boot-source".initrd_path' < "$template")
    rootfs_path=$(jq -r '."drives"[] | select(.is_root_device == true).path_on_host' < "$template")
    other_paths=$(jq -r '."drives"[] | select(.is_root_device == true).path_on_host' < "$template")

    [ ! -f "${base}/${kernel_path}" ] && sudo ln "${KERNELS_DIR}/${kernel_path}" "${base}/${kernel_path}" && sudo chown jailer:jailer "${base}/${kernel_path}"
    [ ! -f "${base}/${rootfs_path}" ] && sudo ln "${FILESYSTEMS_DIR}/${rootfs_path}" "${base}/${rootfs_path}" && sudo chown jailer:jailer "${base}/${rootfs_path}"
    [ "$initrd_path" != "null" ] && [ ! -f "${base}/${initrd_path}" ] && sudo ln "${FILESYSTEMS_DIR}/${initrd_path}" "${base}/${initrd_path}" && sudo chown jailer:jailer "${base}/${initrd_path}"

    for path in $other_paths; do
        [ "$path" != "" ] && [ ! -f "${base}/${path}" ] && sudo ln "${FILESYSTEMS_DIR}/${path}" "${base}/${path}" && sudo chown jailer:jailer "${base}/${path}"
    done

    [ ! -f "${base}/config.json" ] && sudo ln "${VM_CONFIG_DIR}/${id}.json" "${base}/config.json" && sudo chown root:root "${base}/config.json"
    sudo touch "${base}/logs.file"
    sudo chown jailer:jailer "${base}/logs.file"
    log_action "INFO" "Created hardlinks for VM ID: $id."
}

create-vm() {
    log_action "INFO" "Creating VM with ID: $id."
    [ -z "$id" ] && errexit "create-vm requires a VM ID"

    create-rootfs
    create-network
    create-vm-config
    create-hardlinks

    local uid gid
    uid=$(id -u jailer)
    gid=$(getent group jailer | awk -F':' '{print $3}')

    sudo jailer \
         --id "$id" \
         --daemonize \
         --exec-file "$(which firecracker)" \
         --uid "$uid" \
         --gid "$gid" \
         --chroot-base-dir "${CHROOT_BASE}" \
         --netns "${NET_NS_DIR}/$id" \
         --new-pid-ns \
         -- \
         --config-file "config.json" \
         --log-path logs.file --level debug

    log_action "INFO" "Created VM with ID: $id"
}

stop-vm() {
    log_action "INFO" "Stopping VM with ID: $id."
    [ -z "$id" ] && errexit "stop-vm requires a VM ID"

    echo -n "stopping $id..."
    pid=$(sudo cat "${CHROOT_BASE}/firecracker/${id}/root/firecracker.pid")

    sudo curl \
         --unix-socket \
         "${CHROOT_BASE}/firecracker/$id/root/run/firecracker.socket" \
         -H "accept: application/json" \
         -H "Content-Type: application/json" \
         -X PUT "http://localhost/actions" \
         -d "{ \"action_type\": \"SendCtrlAltDel\" }"

    while :
    do
        ps "$pid" > /dev/null || break
        sleep 1
        echo -n "."
    done

    echo
    sudo rm -r "${CHROOT_BASE}/firecracker/${id}/root/firecracker.pid"
    sudo rm -r "${CHROOT_BASE}/firecracker/${id}/root/dev"
    sudo rm -r "${CHROOT_BASE}/firecracker/${id}/root/run"
    log_action "INFO" "Stopped VM with ID: $id."
}

destroy-vm() {
    log_action "INFO" "Destroying VM with ID: $id."
    [ -z "$id" ] && errexit "destroy-vm requires a VM ID"

    stop-vm
    sudo rm -fr "${CHROOT_BASE}/firecracker/${id}"
    destroy-network
    log_action "INFO" "Destroyed VM with ID: $id."
}

create-network() {
    log_action "INFO" "Creating network for VM with ID: $id."
    [ -z "$id" ] && errexit "create-network requires a network ID"

    [ -f "${NET_CONFIG_DIR}/${id}.json" ] && [ -f "${NET_NS_DIR}/${id}" ] && return

    [ ! -f "${NET_NS_DIR}/${id}" ] && sudo ip netns add "$id"

    local uid gid cniArgs
    uid=$(id -u jailer)
    gid=$(getent group jailer | awk -F':' '{print $3}')
    cniArgs="IgnoreUnknown=1;TC_REDIRECT_TAP_UID=$uid;TC_REDIRECT_TAP_GID=$gid;TC_REDIRECT_TAP_NAME=tap1"

    local result
    result=$(sudo CNI_PATH="/opt/cni/bin" \
                  NETCONFPATH="/etc/cni/net.d" \
                  CNI_ARGS="$cniArgs" \
                  cnitool add \
                  "$cni" \
                  "${NET_NS_DIR}/$id")
    echo "$result" | sudo tee "${NET_CONFIG_DIR}/${id}.json" > /dev/null
    log_action "INFO" "Created network for VM with ID: $id"
}

destroy-network() {
    log_action "INFO" "Destroying network for VM with ID: $id."
    [ -z "$id" ] && errexit "destroy-network requires a network ID prefix"

    local networks count
    networks=$(find "$NET_CONFIG_DIR" -name "${id}*.json")
    count=$(echo "$networks" | wc -l)

    if [[ $count -gt 1 ]]; then
        errexit "destroy-network found more than one network with prefix: $id"
    fi

    if [[ $count == 1 ]] && [[ $networks != "" ]]; then
        id=$(basename "${networks%.json}")
    fi

    sudo CNI_PATH='/opt/cni/bin' NETCONFPATH='/etc/cni/net.d' \
         cnitool del \
         firecracker \
         "${NET_NS_DIR}/$id"

    sudo ip netns del "$id"
    sudo rm -f "$networks"
    log_action "INFO" "Destroyed network for VM with ID: $id"
}

cmd=${1-unknown}
case $cmd in
    help|--help)        help; exit 0 ;;
    check)              check; exit 0 ;;
    create|create-vm)   cmd=create-vm ;;
    destroy|destroy-vm) cmd=destroy-vm ;;
    stop|stop-vm)       cmd=stop-vm ;;
    create-network|destroy-network) ;;
    unknown) help; errexit "missing command" ;;
    *) help; errexit "unknown command: $cmd" ;;
esac

shift 1 || break

while (($#)); do
    case $1 in
        help|--help) help; exit 0 ;;
        --id)        id=${2-}; shift 2 || break ;;
        --cni)       cni=${2-}; shift 2 || break ;;
        --image)     image=${2-}; shift 2 || break ;;
        --template)  template=${2-}; shift 2 || break ;;
        *) errexit "unknown argument: $1" ;;
    esac
done

check
"$cmd"
